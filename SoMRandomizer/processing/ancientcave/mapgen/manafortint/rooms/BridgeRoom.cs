using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SoMRandomizer.processing.ancientcave.mapgen.manafortint.rooms
{
    /// <summary>
    /// Manafort tileset room with a bridge in it.
    /// </summary>
    /// 
    /// <remarks>Author: Moppleton</remarks>
    public class BridgeRoom : ManafortRoomMaker
    {
        static byte[] baseRoom = new byte[] {
                 95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,  95,
                 91, 135,  80,  80,  80,  80,  80,  80,  80,  80,  80,  80,  80,  80,  80,  80,  80,  80, 136,  91,
                 76, 159,  96,  96,  96,  96,  96,  96,  96,  96,  96,  96,  96,  96,  96,  96,  96,  96, 157,  76,
                 76, 159, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 112, 157,  76,
                 76, 159, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 157,  76,
                 76, 159, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 144, 157,  76,
                 76, 159, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 160, 157,  76,
                 76, 159,  49,  50,  49,  50,  49,  50,  49,  50,  49,  50,  49,  50,  49,  50,  49,  50, 157,  76,
                 76, 159,  65,  66,  65,   1,   2,  66,  65,  66,  65,  66,  65,   1,   2,  66,  65,  66, 157,  76,
                 76, 159,  15,  15,  15,  17,  18,  15,  15,  15,  15,  15,  15,  17,  18,  15,  15,  15, 157,  76,
                 76, 159,  15,   1,   2,  49,  50,   1,   2,  48,  48,   1,   2,  49,  50,   1,   2,  15, 157,  76,
                 76, 159,  15,  17,  18,  65,  66,  17,  18,  48,  48,  17,  18,  65,  66,  17,  18,  15, 157,  76,
                 76, 159,  15,  49,  50,  15,  15,  48,  48,  49,  50,  48,  48,  15,  15,  49,  50,  15, 157,  76,
                 76, 159,  15,  65,  66,  15,  15,  48,  48,  65,  66,  48,  48,  15,  15,  65,  66,  15, 157,  76,
                 76, 159,  15,   1,   2,  15,  15,   1,   2,  48,  48,   1,   2,  15,  15,   1,   2,  15, 157,  76,
                 76, 159,  15,  17,  18,  15,  15,  17,  18,  48,  48,  17,  18,  15,  15,  17,  18,  15, 157,  76,
                 76, 159,  15,  49,  50,   1,   2,  49,  50,  49,  50,  49,  50,   1,   2,  49,  50,  15, 157,  76,
                 76, 159,  15,  65,  66,  17,  18,  65,  66,  65,  66,  65,  66,  17,  18,  65,  66,  15, 157,  76,
                 76, 151, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 142, 152,  76,
                106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106, 106,
        };

        // 0, 0
        static byte[] leftPassage = new byte[]
        {
                 95,  95,  95,
                 91, 135, 174,
                135,  99, 147,
                 99,  96, 116,
                 96, 112, 150,
                112, 128, 165,
                128, 144,  10,
                144, 161,  44,
                160,  44,  49,
                 49,  50,  65,
                 65,  66,  15,
                 15,  15,  15,
                 15,  15,  15,
                 15,  15,  15,
                 15,  15,  15,
                 15,  15,  15,
                 15,  15,  15,
                142, 143,  15,
                108, 151, 142,
                106, 106, 106,
        };

        // 0, 12
        static byte[] leftBridge = new byte[]
        {
                 1,   2,  48,  48,  48,  48,  48,
                17,  18,  48,  48,  48,  48,  48,
                49,  50,  49,  1,   2,   50,  49,
                65,  66,  65, 17,  18,   66,  65,

        };

        // 17, 0
        static byte[] rightPassage = new byte[]
        {
                 95,  95,  95,
                174, 136,  91,
                147,  98, 136,
                116,  96,  98,
                150, 112,  96,
                165, 128, 112,
                 12, 144, 128,
                 42, 162, 144,
                 49,  42, 160,
                 65,  49,  50,
                 15,  65,  66,
                 15,  15,  15,
                 15,  15,  15,
                 15,  15,  15,
                 15,  15,  15,
                 15,  15,  15,
                 15,  15,  15,
                 15, 141, 142,
                142, 152, 108,
                106, 106, 106,
        };

        // 13, 12
        static byte[] rightBridge = new byte[]
        {
                48,  48,  48,  48,  48,   1,   2,
                48,  48,  48,  48,  48,  17,  18,
                49,  50,   1,   2,  49,  50,  49,
                65,  66,  17,  18,  65,  66,  65,
        };

        // 3, 17
        static byte[] bottomPassage = new byte[]
        {
                 15,  15,  17,  18,  15,  15,  15,  15,  15,  15,  17,  18,  15,  15,
                142, 142, 142, 142, 142, 143,  48,  48, 141, 142, 142, 142, 142, 142,
                106, 106, 106, 106, 106, 151, 139, 139, 152, 106, 106, 106, 106, 106,
        };

        // 9, 16
        static byte[] bottomBridge = new byte[]
        {
                48, 48,
                48, 48,
        };

        // 3, 0
        static byte[] topPassage = new byte[]
        {
                 95,  95,  95,  95, 135,  80, 171, 171,  80, 136,  95,  95,  95,  95,
                 80,  80,  80,  80,  99,  96, 147, 147,  96,  98,  80,  80,  80,  80,
                 96,  96,  96,  96,  96, 112,  46,  47, 112,  96,  96,  96,  96,  96,
                112, 112, 112, 112, 112, 128,  53,  34, 128, 112, 112, 112, 112, 112,
                128, 128, 128, 128, 128, 144,  69,  34, 144, 128, 128, 128, 128, 128,
                144, 144, 144, 144, 144, 161,   5,   6, 162, 144, 144, 144, 144, 144,
                160, 160, 160, 160, 160,  44,  21,  22,  42, 160, 160, 160, 160, 160,
                 50,  49,  50,  49,  50,  49, 105, 105,  50,  49,  50,  49,  50,  49,
        };

        // 9, 8
        static byte[] topBridge = new byte[]
        {
                48, 48,
                48, 48,
        };

        // 9, 2 on top of topPassage
        static byte[] doorBlock = new byte[]
        {
                163, 164,
                176, 180,
                177, 181,
        };

        public override byte[,] generateRoom(bool rightPath, bool leftPath, bool topPath, bool bottomPath, bool door, Random r)
        {
            byte[] room = new byte[400];
            for (int i = 0; i < 400; i++)
            {
                room[i] = baseRoom[i];
            }

            if (rightPath)
            {
                injectData(room, rightPassage, 17, 0, 3);
                injectData(room, rightBridge, 13, 12, 7);
            }
            if (leftPath)
            {
                injectData(room, leftPassage, 0, 0, 3);
                injectData(room, leftBridge, 0, 12, 7);
            }
            if (bottomPath)
            {
                injectData(room, bottomPassage, 3, 17, 14);
                injectData(room, bottomBridge, 9, 16, 2);
            }
            if (topPath)
            {
                injectData(room, topPassage, 3, 0, 14);
                injectData(room, topBridge, 9, 8, 2);
            }
            else if (door)
            {
                injectData(room, topPassage, 3, 0, 14);
                injectData(room, topBridge, 9, 8, 2);
                injectData(room, doorBlock, 9, 2, 2);
            }

            byte[,] layer1 = new byte[20, 20];

            for (int yPos = 0; yPos < 20; yPos++)
            {
                for (int xPos = 0; xPos < 20; xPos++)
                {
                    layer1[xPos, yPos] = room[yPos * 20 + xPos];
                }
            }

            return layer1;
        }
    }
}
